%==========================================================================
%This function writes a function, testDataSets, for testing the viewer on
%all jsons stored locally in the Data/jsons directory. It takes in one
%input:
%
%-skip - this is a boolean - when true we don't test any jsons that do not
%have corresponding zips stored locally or online, when false we ask the
%user if they can provide information for downloading these zips.
%
%Authors: Thomas Maullin, Camille Maumet, Thomas Nichols
%==========================================================================

function createTest(skip)
    
    %If the user didn't specify we assume they wish to skip jsons with no
    %corresponding zip files.
    if nargin < 1
        skip = 1;
    end
    
    %Create new test file for editing.
    FID = fopen(fullfile(fileparts(mfilename('fullpath')), 'testDataSets.m'),'wt');

    %Add the start of the test code.
    start = sprintf('%s' , '%%==========================================================================',...
        '\n%%Unit tests for testing whether datasets run in the viewer. To run the',... 
        '\n%%below run the runTest function. The html files generated can be found in',...
        '\n%%the corresponding folders after the test has been run.',...
        '\n%%',...
        '\n%%Authors: Thomas Maullin, Camille Maumet. (Generated by the createTest',...
        '\n%%function).',...
        '\n%%==========================================================================',...
        '\n classdef testDataSets < matlab.unittest.TestCase',...  
        '\n \n \t methods',...
        '\n \t \t %%Function for deleting any HTML generated previously by the viewer',...
        '\n \t \t function delete_html_file(testCase, data_path)',...
        '\n \t \t \t index = fullfile(data_path,', sprintf('''index.html'''), ');',...
        '\n \t \t \t if exist(index, ', sprintf('''file'''), ')',...
        '\n \t \t \t \t delete(index);',...
        '\n \t \t \t end',...
        '\n \t \t end',...
        '\n \t end',...  
        '\n \n \t methods(Test)');  %#ok<*NOPRT>
    
    fprintf(FID, start);
    
    %Make a list of all json names stored locally.
%    filelist = cellstr(ls(fullfile(fileparts(mfilename('fullpath')), '..', 'Data', 'jsons')));
%    jsonFileList = filelist([contains(filelist, 'json')]);
%    jsonFileNameList = strrep(jsonFileList, '.json', '');
    files=dir([fullfile(fileparts(mfilename('fullpath')), '..', 'Data', 'jsons','*.json')]);
    jsonFileList={files.name};
    jsonFileNameList = strrep(jsonFileList, '.json', '');

    %For each json, create a test.
    
    for i = 1:length(jsonFileList)      
        %Find the json download location.
        json = spm_jsonread(fullfile(fileparts(mfilename('fullpath')), '..', 'Data', 'jsons', jsonFileList{i}));
        [designMatrix, dmLocation] = searchforType('nidm_DesignMatrix', json.x_graph);
        goAhead = true;
        jsonLocation = [fileparts(designMatrix{1}.prov_atLocation.x_value), '.zip'];
        %If there isn't a stored web URL, the user has chosen not to skip this and
        %there is no folder corresponding to the name of this json, ask the user
        %to provide a link.
        if ((strcmp(jsonLocation,'')) || (strcmp(jsonLocation(1),'.'))) &&...
                ~skip &&...
                ~exist(fullfile(fileparts(mfilename('fullpath')),'..','Data',jsonFileNameList{i}), 'dir')
            
             link = inputdlg(['There is no stored download zip web link for ',...
                    jsonFileNameList{i}, '. Please provide one below or cancel to avoid testing ',...
                    jsonFileNameList{i}, '.'],'Download required');
                
             %Check the download link either works or is empty.
             notDownloadable = false; 
             if ~isempty(link)
                 link = link{1};
                 try
                     websave(pwd, link);
                 catch
                     notDownloadable = true;
                 end
             end
             
             %If it was not a usable link ask the user again.
             while notDownloadable && ~isempty(link)
                 notDownloadable = false;
                 try
                     websave(pwd, link);
                 catch
                     notDownloadable = true;
                     link = inputdlg('This link does not work. Please try again.','Download required');
                     if ~isempty(link)
                         link = link{1};
                     end
                 end
             end         
             if isempty(link) 
                 goAhead = false;
             else
                 goAhead = true;
                 jsonLocation = link;
                 %Save the location in the json.
                 designMatrix{1}.prov_atLocation.x_value = strrep(jsonLocation, '.zip', '/DesignMatrix.csv');
                 graph = json.x_graph;
                 graph{dmLocation{1}} = designMatrix{1};
                 json.x_graph = graph;
                 disp(json.x_graph{dmLocation{1}}.prov_atLocation.x_value);
                 spm_jsonwrite(fullfile(fileparts(mfilename('fullpath')), '..', 'Data', 'jsons', jsonFileList{i}),json);
                 disp(fullfile(fileparts(mfilename('fullpath')), '..', 'Data', 'jsons', jsonFileList{i}));
             end
        end
        
        if ((strcmp(jsonLocation,'')) || (strcmp(jsonLocation(1),'.')))...
                && skip...
                &&~exist(fullfile(fileparts(mfilename('fullpath')),'..','Data',jsonFileNameList{i}), 'dir')
            
            goAhead = false;     
        end
        
        if(goAhead)
            tests = sprintf('%s' , '\n \n \t \t %%Test viewer displays ',jsonFileNameList{i},... 
                '\n \t \t function test_', jsonFileNameList{i},'(testCase)',...
                '\n \t \t \t data_path = fullfile(fileparts(mfilename(', sprintf('''fullpath'''), ')),', sprintf('''..'','), sprintf('''Data'','), '''', jsonFileNameList{i}, '''', ');',...
                '\n \t \t \t', sprintf(' if(~exist(data_path, ''dir''))'),...
                '\n \t \t \t \t mkdir(data_path);',...
                '\n \t \t \t \t websave([data_path, filesep, ''temp.zip''], ''', jsonLocation,''');',...
                '\n \t \t \t \t unzip([data_path, filesep, ''temp.zip''], [data_path, filesep]);',...
                '\n \t \t \t end',...
                '\n \t \t \t testCase.delete_html_file(data_path);',...
                '\n \t \t \t nidm_results_display(fullfile(fileparts(mfilename(''fullpath'')), ''..'', ''Data'', ''jsons'',','''', jsonFileList{i},'''', '));',...
                '\n \t \t end');
            fprintf(FID, tests);
        end 
    end
    
    %end the test file.
    last = sprintf('%s', '\n \n \t end', '\n \n end');
    fprintf(FID, last);
    
    fclose(FID);

end
